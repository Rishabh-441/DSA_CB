class Solution
{
    static class Dijkastra_Pair {
        int val;
        int cost;

        public Dijkastra_Pair(int val, int cost) {
            this.val = val;
            this.cost = cost;
        }
    }
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.

    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
        // Write your code here
        // System.out.println(adj);
        HashMap<Integer, HashMap<Integer, Integer>> map = new HashMap<>();
        for (int i = 0; i < adj.size(); i++) {
            if (!map.containsKey(i)) map.put(i, new HashMap<Integer, Integer>());
            for (int j = 0; j < adj.get(i).size(); j++) {
                if (adj.get(i).get(j) != null)
                    map.get(i).put(adj.get(i).get(j).get(0), adj.get(i).get(j).get(1));
            }
        }
        int[] ver = new int[V];
        boolean[] visited = new boolean[V];


        PriorityQueue<Dijkastra_Pair> q = new PriorityQueue<>(new Comparator<Dijkastra_Pair>() {
            @Override
            public int compare(Dijkastra_Pair o1, Dijkastra_Pair o2) {
                return o1.cost-o2.cost;
            }
        });

        Dijkastra_Pair d = new Dijkastra_Pair(S, 0);
        q.add(d);
        ver[S] = 0;
        while (!q.isEmpty()) {
            
            Dijkastra_Pair p = q.poll();
            if (visited[p.val]) {
                continue;
            }
            visited[p.val] = true;
            ver[p.val] = p.cost;
            
            for (int nbrs : map.get(p.val).keySet()) {
                if (!visited[nbrs]) {
                    Dijkastra_Pair nbr = new Dijkastra_Pair(nbrs, p.cost+map.get(p.val).get(nbrs));
                    q.add(nbr);
                }
            }

        }
        return ver;
    }
}

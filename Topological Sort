class Solution
{
    //Function to return list containing vertices in Topological order. 
    static int[] topoSort(int n, ArrayList<ArrayList<Integer>> adj) 
    {
        int[] topo = new int[n];
        int x = 0;
        Queue<Integer> q = new LinkedList<>();
        int[] inc = new int[n];
        boolean[] visited = new boolean[n];
        
        for (int i = 0 ;i < adj.size(); i++) {
            for (int j = 0; j < adj.get(i).size(); j++) {
                inc[adj.get(i).get(j)]++;
            }
        }
        
        for (int i = 0; i < n; i++) {
            if (inc[i] == 0) {
                q.add(i);
                visited[i] = true;
            }
        }
        
        while (!q.isEmpty()) {
            int node = q.poll();
            topo[x++] = node;
            visited[node] = true;
            
            for (int i = 0; i < adj.get(node).size(); i++) {
                int nbr = adj.get(node).get(i);
                if (--inc[nbr] == 0) {
                    q.add(nbr);
                }
            }
        }
        return topo;
    }
}

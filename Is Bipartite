class Solution {
    class BPair {
        int val;
        int lvl;

        public BPair(int val, int lvl) {
            this.val = val;
            this.lvl = lvl;
        }
    }
    public boolean isBipartite(int[][] graph) {
        HashMap<Integer, Integer> visited = new HashMap<>();
        Queue<BPair> q = new LinkedList<>();

        for (int i = 0 ; i < graph.length; i++) {
            if (visited.containsKey(i)) continue;
            q.add(new BPair(i, 0));

            while (!q.isEmpty()) {
                BPair node = q.poll();

                if (visited.containsKey(node.val)) {
                    if (visited.get(node.val) != node.lvl) return false;
                    else continue;
                }

                visited.put(node.val, node.lvl);

                for (int nbrs : graph[node.val]) {
                    if (!visited.containsKey(nbrs)) {
                        q.add(new BPair(nbrs, node.lvl + 1));
                    }
                }
            }
        }
        return true;
    }
}

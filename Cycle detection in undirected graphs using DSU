class Scratch {
    //cycle detection in undirected graph using disjoint set union
    //declaring the parent array:
    static int[] par;

    //declaring the rank array:
    static int[] rank;

    public static void main(String[] args) {
//        input : edges of the graph
        int[][] arr = {
                {1,2},
                {2,3},
                {3,4},
                {4,5},
                {5,3}
        };


        //initializing the par array:  --> size = 5 as no.of nodes in graph is 5
        par = new int[5];
        for (int i = 0; i < 5; i++) {
            par[i] = i+1;
        }

        //by default all elements of rank array is initialized by 0
        //we havent defined our rank array yet:
        rank = new int[5];

        for (int[] edge : arr) {
            if (find(edge[0]) == find(edge[1])) {
                System.out.println("cycle detected");
                return;
            }
            else {
                union(edge[0], edge[1]);
            }
        }

        System.out.println("no cycle detected");

    }

    private static int find(int ver) {
        if (par[ver-1] == ver) {
            return ver;
        }

        return par[ver-1] = find(par[ver-1]);
    }

    private static void union(int ver1, int ver2) {
        if (rank[ver1-1] == rank[ver2-1]) {
            par[ver1-1] = ver2;
            rank[ver2-1]++;
        }
        else if (rank[ver1-1] > rank[ver2-1]) {
            par[ver2-1] = ver1;
        }
        else {
            par[ver1-1] = ver2;
        }
    }

}
